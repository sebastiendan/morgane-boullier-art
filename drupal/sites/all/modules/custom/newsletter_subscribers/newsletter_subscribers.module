<?php

/**
 * @file
 * Module for the NewsletterSubscribers Entity.
 */



/**
 * Implements hook_entity_info().
 */
function newsletter_subscribers_entity_info() {
  $return['newsletter_subscriber'] = array(
    'label'             => t('Newsletter subscriber'),
    'plural label'      => t('Newsletter subscribers'),
    // The entity class and controller class extend the classes provided by the
    // Entity API.
    'entity class'      => 'NewsletterSubscriber',
    'controller class'  => 'NewsletterSubscriberController',
    'base table'        => 'newsletter_subscriber',
    'fieldable'         => TRUE,
    'entity keys'       => array(
      'id'     => 'newsletter_subscriber_id',
      'bundle' => 'type',
    ),
    // Bundles are defined by the newsletter_subscriber types below.
    'bundles'           => array(),
    // Bundle keys tell the FieldAPI how to extract information from the
    // bundle objects.
    'bundle keys'       => array(
      'bundle' => 'type',
    ),
    'label callback'    => 'entity_class_label',
    'uri callback'      => 'entity_class_uri',
    'creation callback' => 'newsletter_subscriber_create',
    'access callback'   => 'newsletter_subscriber_access',
    'module'            => 'newsletter_subscribers',
    // The information below is used by the NewsletterSubscriberUIController
    // (which extends the EntityDefaultUIController).
    'admin ui'          => array(
      'path'             => 'admin/content/newsletter_subscribers',
      'file'             => 'newsletter_subscribers_newsletter_subscriber.admin.inc',
      'controller class' => 'NewsletterSubscriberUIController',
      'menu wildcard'    => '%newsletter_subscriber',
    ),
    'inline entity form' => array(
      'controller' => 'NewsletterSubscriberInlineEntityFormController'
    ),
  );

  // The entity that holds information about the entity types.
  $return['newsletter_subscriber_type'] = array(
    'label'            => t('Newsletter subscriber type'),
    'plural label'     => t('Newsletter subscriber types'),
    'entity class'     => 'NewsletterSubscriberType',
    'controller class' => 'NewsletterSubscriberTypeController',
    'base table'       => 'newsletter_subscriber_type',
    'fieldable'        => FALSE,
    'bundle of'        => 'newsletter_subscriber',
    'exportable'       => TRUE,
    'entity keys'      => array(
      'id'    => 'id',
      'name'  => 'type',
      'label' => 'label',
    ),
    'access callback'  => 'newsletter_subscriber_type_access',
    'module'           => 'newsletter_subscribers',
    // Enable the entity API's admin UI.
    'admin ui'         => array(
      'path'             => 'admin/structure/newsletter_subscriber_types',
      'file'             => 'newsletter_subscribers_newsletter_subscriber_type.admin.inc',
      'controller class' => 'NewsletterSubscriberTypeUIController',
    ),
  );

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the newsletter_subscriber types via a hook to avoid
 * a recursion issue as loading the newsletter_subscriber types requires the entity
 * info as well.
 *
 * @todo This needs to be improved
 */
function newsletter_subscribers_entity_info_alter(&$entity_info) {
  foreach (newsletter_subscriber_get_types() as $type => $info) {
    $entity_info['newsletter_subscriber']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path'             => 'admin/structure/newsletter_subscriber_types/manage/%newsletter_subscriber_type',
        'real path'        => 'admin/structure/newsletter_subscriber_types/manage/' . $type,
        'bundle argument'  => 4,
        'access arguments' => array('administer newsletter_subscriber types'),
      ),
    );
  }
}

/**
 * Implements hook_permission().
 */
function newsletter_subscribers_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity.
  $permissions = array(
    'administer newsletter_subscriber types' => array(
      'title'       => t('Administer newsletter_subscriber types'),
      'description' => t('Create and delete fields for newsletter_subscriber types, and set their permissions.'),
    ),
    'administer newsletter_subscribers'     => array(
      'title'       => t('Administer newsletter_subscribers'),
      'description' => t('Edit and delete all newsletter_subscribers'),
    ),
  );

  // Generate permissions per newsletter_subscriber.
  foreach (newsletter_subscriber_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit any $type_name newsletter_subscriber"   => array(
        'title' => t('%type_name: Edit any newsletter_subscriber', array('%type_name' => $type->label)),
      ),
      "view any $type_name newsletter_subscriber"   => array(
        'title' => t('%type_name: View any newsletter_subscriber', array('%type_name' => $type->label)),
      ),
      "view own $type_name newsletter_subscriber"   => array(
        'title' => t('%type_name: View own newsletter_subscriber', array('%type_name' => $type->label)),
      ),
      "edit own $type_name newsletter_subscriber"   => array(
        'title' => t('%type_name: Edit own newsletter_subscriber', array('%type_name' => $type->label)),
      ),
      "delete own $type_name newsletter_subscriber" => array(
        'title' => t('%type_name: Delete own newsletter_subscriber', array('%type_name' => $type->label)),
      ),
    );
  }

  return $permissions;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function newsletter_subscribers_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/structure/newsletter_subscribers/add'
  // on 'admin/structure/newsletter_subscribers'.
  if ($root_path == 'admin/content/newsletter_subscribers') {
    $item = menu_get_item('admin/content/newsletter_subscribers/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link'  => $item,
      );
    }
  }
}

/**
 * Implements hook_theme().
 */
function newsletter_subscribers_theme() {
  return array(
    'newsletter_subscriber_add_list' => array(
      'variables' => array('content' => array()),
      'file'      => 'newsletter_subscribers_newsletter_subscriber.admin.inc',
    ),
    'newsletter_subscriber'          => array(
      'render element' => 'elements',
      'template'       => 'newsletter_subscriber',
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function newsletter_subscribers_views_api() {
  return array(
    'api'  => 3,
    'path' => drupal_get_path('module', 'newsletter_subscribers') . '/views',
  );
}

/**
 * Determines whether the given user has access to a newsletter_subscriber.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param object $newsletter_subscriber
 *   Optionally a newsletter_subscriber or a newsletter_subscriber type to check access for.
 *   If nothing is given, access for all newsletter_subscribers is determined.
 * @param object $account
 *   The user to check for. Leave it to NULL to check for the global user.
 *
 * @return bool
 *   Whether access is allowed or not.
 */
function newsletter_subscriber_access($op, $newsletter_subscriber = NULL, $account = NULL) {
  if (user_access('administer newsletter_subscribers', $account)) {
    return TRUE;
  }
  if (isset($newsletter_subscriber) && $type_name = $newsletter_subscriber->type) {
    $op = ($op == 'view') ? 'view' : 'edit';
    if (user_access("$op any $type_name newsletter_subscriber", $account)) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Access callback for the entity API.
 */
function newsletter_subscriber_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer newsletter_subscriber types', $account);
}

/**
 * Gets an array of all newsletter_subscriber types, keyed by the type name.
 *
 * @param string $type_name
 *   If set, the type with the given name is returned.
 *
 * @return NewsletterSubscriberType[]
 *   Depending whether $type isset, an array of newsletter_subscriber types
 *   or a single one.
 */
function newsletter_subscriber_get_types($type_name = NULL) {
  // entity_load will get the Entity controller for our newsletter_subscriber entity
  // and call the load function of that object - we are loading entities
  // by name here.
  $types = entity_load_multiple_by_name('newsletter_subscriber_type', isset($type_name) ? array($type_name) : FALSE);

  return isset($type_name) ? reset($types) : $types;
}

/**
 * Menu argument loader; Load a newsletter_subscriber type by string.
 *
 * @param string $type
 *   The machine-readable name of a newsletter_subscriber type to load.
 *
 * @return array|bool
 *   A newsletter_subscriber type array or FALSE if $type does not exist.
 */
function newsletter_subscriber_type_load($type) {
  return newsletter_subscriber_get_types($type);
}

/**
 * Fetch a newsletter_subscriber object; make sure that the wildcard you choose
 * in the newsletter_subscriber entity definition fits the function name here.
 *
 * @param int $newsletter_subscriber_id
 *   Integer specifying the newsletter_subscriber id.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return object|bool
 *   A fully-loaded $newsletter_subscriber object or FALSE if it cannot be loaded.
 *
 * @see newsletter_subscriber_load_multiple()
 */
function newsletter_subscriber_load($newsletter_subscriber_id, $reset = FALSE) {
  $newsletter_subscribers = newsletter_subscriber_load_multiple(array($newsletter_subscriber_id), array(), $reset);

  return reset($newsletter_subscribers);
}

/**
 * Load multiple newsletter_subscribers based on certain conditions.
 *
 * @param array $newsletter_subscriber_ids
 *   An array of newsletter_subscriber IDs.
 * @param array $conditions
 *   An array of conditions to match against the {newsletter_subscriber} table.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return array
 *   An array of newsletter_subscriber objects, indexed by newsletter_subscriber_id.
 *
 * @see entity_load()
 * @see newsletter_subscriber_load()
 */
function newsletter_subscriber_load_multiple($newsletter_subscriber_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('newsletter_subscriber', $newsletter_subscriber_ids, $conditions, $reset);
}

/**
 * Deletes a newsletter_subscriber.
 *
 * @param \NewsletterSubscriber $newsletter_subscriber
 *   Entity newsletter_subscribers.
 */
function newsletter_subscriber_delete(NewsletterSubscriber $newsletter_subscriber) {
  $newsletter_subscriber->delete();
}

/**
 * Delete multiple newsletter_subscribers.
 *
 * @param array $newsletter_subscriber_ids
 *   An array of newsletter_subscriber IDs.
 */
function newsletter_subscriber_delete_multiple(array $newsletter_subscriber_ids) {
  entity_get_controller('newsletter_subscriber')->delete($newsletter_subscriber_ids);
}

/**
 * Create a newsletter_subscriber object.
 *
 * @param array $values
 *   An array of values.
 */
function newsletter_subscriber_create($values = array()) {
  return entity_get_controller('newsletter_subscriber')->create($values);
}

/**
 * Saves a newsletter_subscriber to the database.
 *
 * @param \NewsletterSubscriber $newsletter_subscriber
 *   The newsletter_subscriber object.
 */
function newsletter_subscriber_save(NewsletterSubscriber $newsletter_subscriber) {
  return $newsletter_subscriber->save();
}

/**
 * Saves a newsletter_subscriber type to the db.
 *
 * @param \NewsletterSubscriberType $type
 *   The newsletter_subscriber type object.
 */
function newsletter_subscriber_type_save(NewsletterSubscriberType $type) {
  $type->save();
}

/**
 * Deletes a newsletter_subscriber type from the db.
 *
 * @param \NewsletterSubscriberType $type
 *   The newsletter_subscriber type object.
 */
function newsletter_subscriber_type_delete(NewsletterSubscriberType $type) {
  $type->delete();
}

/**
 * URI callback for newsletter_subscribers.
 *
 * @param \NewsletterSubscriber $newsletter_subscriber
 *   The newsletter_subscriber object.
 *
 * @return array
 *   URI callback.
 */
function newsletter_subscriber_uri(NewsletterSubscriber $newsletter_subscriber) {
  return array(
    'path' => 'newsletter_subscriber/' . $newsletter_subscriber->newsletter_subscriber_id,
  );
}

/**
 * Menu title callback for showing individual entities.
 *
 * @param \NewsletterSubscriber $newsletter_subscriber
 *   The newsletter_subscriber object.
 *
 * @return string
 *   Menu title.
 */
function newsletter_subscriber_page_title(NewsletterSubscriber $newsletter_subscriber) {
  return $newsletter_subscriber->name;
}

/**
 * Sets up content to show an individual newsletter_subscriber.
 * @todo - get rid of drupal_set_title();
 *
 * @param \NewsletterSubscriber $newsletter_subscriber
 *   The newsletter_subscriber object.
 * @param string $view_mode
 *   View mode.
 *
 * @return mixed
 *   Content.
 */
function newsletter_subscriber_page_view(NewsletterSubscriber $newsletter_subscriber, $view_mode = 'full') {
  $controller = entity_get_controller('newsletter_subscriber');
  $content = $controller->view(array($newsletter_subscriber->newsletter_subscriber_id => $newsletter_subscriber));
  drupal_set_title($newsletter_subscriber->name);

  return $content;
}






if (class_exists('EntityInlineEntityFormController')) {
  /**
   * The Controller for NewsletterSubscriber entities for Inline Entity Form.
   *
   * Class NewsletterSubscriberInlineEntityFormController
   */
  class NewsletterSubscriberInlineEntityFormController extends EntityInlineEntityFormController {

  }
}


